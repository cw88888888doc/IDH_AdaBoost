{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5183177-0cec-4c78-9f4d-1313e622251e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import joblib\n",
    "import pandas as pd\n",
    "import shap\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_agg import FigureCanvasAgg\n",
    "import plotly.express as px\n",
    "\n",
    "# 配置页面\n",
    "st.set_page_config(\n",
    "    page_title=\"AKI风险预测系统\",\n",
    "    page_icon=\"🏥\",\n",
    "    layout=\"wide\"\n",
    ")\n",
    "\n",
    "# 自定义样式\n",
    "def local_css(file_name):\n",
    "    with open(file_name) as f:\n",
    "        st.markdown(f\"<style>{f.read()}</style>\", unsafe_allow_html=True)\n",
    "local_css(\"assets/style.css\")  # 可选\n",
    "\n",
    "# 加载模型\n",
    "@st.cache_resource\n",
    "def load_model():\n",
    "    model = joblib.load('model/best_model.pkl')\n",
    "    features = joblib.load('model/feature_names.pkl')\n",
    "    return model, features\n",
    "\n",
    "model, feature_names = load_model()\n",
    "\n",
    "# 侧边栏 - 输入表单\n",
    "st.sidebar.header(\"患者参数输入\")\n",
    "input_data = {}\n",
    "for feat in feature_names:\n",
    "    if feat in ['enhanced', 'symptom', 'edema']:  # 分类特征\n",
    "        input_data[feat] = st.sidebar.selectbox(\n",
    "            f\"{feat} (是否)\", \n",
    "            options=[0, 1],\n",
    "            format_func=lambda x: \"是\" if x == 1 else \"否\"\n",
    "        )\n",
    "    else:  # 数值特征\n",
    "        input_data[feat] = st.sidebar.number_input(\n",
    "            feat, \n",
    "            min_value=0.0,\n",
    "            max_value=120.0 if feat == 'age' else 1000.0,\n",
    "            value=50.0 if feat == 'age' else 0.5\n",
    "        )\n",
    "\n",
    "# 主界面\n",
    "st.title(\"急性肾损伤(AKI)风险评估系统\")\n",
    "st.image(\"assets/hospital_logo.png\", width=200)\n",
    "\n",
    "# 预测按钮\n",
    "if st.sidebar.button(\"风险评估\", type=\"primary\"):\n",
    "    # 转换为DataFrame\n",
    "    input_df = pd.DataFrame([input_data])[feature_names]\n",
    "    \n",
    "    # 预测\n",
    "    proba = model.predict_proba(input_df)[0][1]\n",
    "    risk_level = \"高风险\" if proba > 0.5 else \"低风险\"\n",
    "    \n",
    "    # 显示结果\n",
    "    col1, col2 = st.columns(2)\n",
    "    with col1:\n",
    "        st.subheader(\"预测结果\")\n",
    "        st.metric(\"AKI概率\", f\"{proba*100:.1f}%\", delta_color=\"inverse\")\n",
    "        st.write(f\"**风险等级**: :{'red' if risk_level == '高风险' else 'green'}[{risk_level}]\")\n",
    "        \n",
    "        # 临床建议\n",
    "        st.subheader(\"临床建议\")\n",
    "        if proba > 0.7:\n",
    "            st.warning(\"\"\"\n",
    "            - 立即复查血清肌酐\n",
    "            - 监测尿量每小时\n",
    "            - 避免肾毒性药物\n",
    "            \"\"\")\n",
    "        elif proba > 0.3:\n",
    "            st.info(\"\"\"\n",
    "            - 6小时内复查肾功能\n",
    "            - 评估容量状态\n",
    "            \"\"\")\n",
    "        else:\n",
    "            st.success(\"常规监测即可\")\n",
    "    \n",
    "    with col2:\n",
    "        # SHAP解释\n",
    "        st.subheader(\"风险因素分析\")\n",
    "        \n",
    "        # 计算SHAP值\n",
    "        explainer = shap.TreeExplainer(model)\n",
    "        shap_values = explainer.shap_values(input_df)\n",
    "        \n",
    "        # 动态选择解释图表\n",
    "        tab1, tab2, tab3 = st.tabs([\"特征贡献\", \"决策路径\", \"详细分解\"])\n",
    "        \n",
    "        with tab1:\n",
    "            fig, ax = plt.subplots()\n",
    "            shap.plots._waterfall.waterfall_legacy(\n",
    "                explainer.expected_value[1], \n",
    "                shap_values[1][0], \n",
    "                feature_names=feature_names,\n",
    "                show=False\n",
    "            )\n",
    "            st.pyplot(fig)\n",
    "        \n",
    "        with tab2:\n",
    "            fig, ax = plt.subplots()\n",
    "            shap.decision_plot(\n",
    "                explainer.expected_value[1], \n",
    "                shap_values[1][0:1], \n",
    "                feature_names=feature_names,\n",
    "                show=False\n",
    "            )\n",
    "            st.pyplot(fig)\n",
    "        \n",
    "        with tab3:\n",
    "            st.write(\"\"\"\n",
    "            | 特征        | 值    | 贡献度 |\n",
    "            |------------|-------|-------|\n",
    "            | age        | {:.1f} | {:.3f} |\n",
    "            | diameter   | {:.1f} | {:.3f} |\n",
    "            | ...        | ...   | ...   |\n",
    "            \"\"\".format(\n",
    "                input_df.iloc[0]['age'], shap_values[1][0][0],\n",
    "                input_df.iloc[0]['diameter'], shap_values[1][0][1]\n",
    "            ))\n",
    "\n",
    "# 添加解释文档\n",
    "with st.expander(\"如何使用本系统\"):\n",
    "    st.markdown(\"\"\"\n",
    "    **数据输入指南**:\n",
    "    - `age`: 患者年龄(岁)\n",
    "    - `diameter`: 病灶直径(mm)\n",
    "    - `SII`: 全身免疫炎症指数\n",
    "    - `enhanced`: 是否增强扫描(0=否,1=是)\n",
    "    \"\"\")\n",
    "\n",
    "# 调试信息（可选）\n",
    "st.sidebar.markdown(\"---\")\n",
    "st.sidebar.write(\"模型信息:\")\n",
    "st.sidebar.code(f\"特征数: {len(feature_names)}\\n最佳AUC: 0.901\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ml",
   "language": "python",
   "name": "ml"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
